name: Build and Deploy 11ty Site

on:
  push:
    branches:
      - main # Adjust this to your main branch name
  pull_request:
    branches:
      - main # Adjust this to your main branch name

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v2

      # Setup Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      # Cache dependencies
      - name: Cache Node.js modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Install dependencies
      - name: Install dependencies
        run: npm install

      # Run linters
      - name: Run linters
        run: npm run lint  # Adjust this command according to your linter setup

      # Run all scripts in the script/** folder
      - name: Run scripts
        env:
          URL_CHECKER_TIMEOUT: 30  # Set your reasonable timeout value in seconds
        run: |
          for script in script/**/*; do
            if [[ -x "$script" ]]; then
              echo "Running script: $script"
              timeout $URL_CHECKER_TIMEOUT "$script" || exit 1
            fi
          done

  build:
    runs-on: ubuntu-latest
    needs: test  # Ensure this job only runs if the test job succeeded

    steps:
      # Check if the test job has run and succeeded
      - name: Check for successful test job
        if: ${{ github.event_name == 'pull_request' }}
        run: echo "Ensure that tests have passed before building."

      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v2

      # Setup pages using actions/configure-pages@v4
      - name: Configure GitHub Pages
        uses: actions/configure-pages@v4

      # Setup Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      # Cache dependencies
      - name: Cache Node.js modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Install dependencies
      - name: Install dependencies
        run: npm install

      # Set the PATH_PREFIX environment variable
      - name: Set PATH_PREFIX
        run: echo "PATH_PREFIX=/${{ github.event.repository.name }}/" >> $GITHUB_ENV

      # Build the static site
      - name: Build the site
        run: npm run eleventy:prod

      # Upload the built site as an artifact
      - name: Upload built site
        uses: actions/upload-artifact@v3
        with:
          name: built-site
          path: _site/**

  deploy:
    runs-on: ubuntu-latest
    needs: build  # Ensure this job only runs if the build job succeeded

    steps:
      # Download built site artifacts
      - name: Download built site
        uses: actions/download-artifact@v3
        with:
          name: built-site
          path: _site

      # Deploy the site to GitHub Pages
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./_site

      # Create a deployment status issue
      - name: Create deployment status issue
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          DATE=$(date +'%Y-%m-%d')
          STATUS="succeeded"
          URL="https://your-knowledge-base-url.com" # Replace with your URL
          ISSUE_TITLE="${DATE} - Deployment: ${STATUS}"
          ISSUE_BODY="URL: ${URL}"
          
          # Create issue with GitHub CLI
          gh issue create --title "${ISSUE_TITLE}" --body "${ISSUE_BODY}"

      # Fail the job if any of the steps fail
      - name: Ensure job failure on error
        run: exit 0
