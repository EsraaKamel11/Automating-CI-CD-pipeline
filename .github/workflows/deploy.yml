name: Build and Deploy 11ty Site

on:
  push:
    branches:
      - main
    paths-ignore:
      - .gitignore
      - README.md
      - CONTRIBUTING.md
      - LICENSE
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deploy the latest changes'
        required: false
        default: 'false'

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      URL_CHECKER_TIMEOUT: 30  # Timeout value for the URL checker script
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Cache Node.js modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node_modules-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node_modules-

      - name: Install dependencies
        run: npm install
        continue-on-error: false

      - name: Install gh-pages
        run: npm install gh-pages --save-dev

      - name: Run linters
        run: npm run lint:all
        continue-on-error: false

      - name: Run URL checker
        run: node script/url-checker.js -t ${{ env.URL_CHECKER_TIMEOUT }} -d src/posts
        continue-on-error: false


  build:
    runs-on: ubuntu-latest
    needs: test  # Ensure the test job ran and succeeded
    env:
      PATH_PREFIX: /${{ github.repository }}/  # Set the PATH_PREFIX at the job level
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup GitHub Pages
      uses: actions/configure-pages@v4
      with:
        enablement: 'true'

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Cache Node.js modules
      uses: actions/cache@v4
      with:
        path: node_modules
        key: ${{ runner.os }}-node_modules-${{ hashFiles('package-lock.json') }}
        restore-keys: |
            ${{ runner.os }}-node_modules-

    - name: Install dependencies
      run: npm install

    - name: Build the static pages
      run: npm run prod
      
     # Zip the _site/ folder
    - name: Zip the _site/ folder
      run: zip -r site.zip _site

    # Upload the zipped _site/ folder as an artifact
    - name: Upload the zipped _site/ folder
      uses: actions/upload-artifact@v4
      with:
        name: site-zip
        path: site.zip

    # Upload _site folder for GitHub Pages deployment
    - name: Upload the _site/ folder for GitHub Pages
      uses: actions/upload-pages-artifact@v3
      with:
        path: '_site'  # Folder to upload for GitHub Pages
        
  jobs:
  deploy:
    runs-on: ubuntu-latest
    needs: build  # Ensure that test and build jobs ran and succeeded

    # Explicitly set the permissions for GITHUB_TOKEN
    permissions:
      contents: read
      pages: write  # Required to deploy to GitHub Pages
      id-token: write  # Required to authenticate with OIDC for deployment

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 1: Download the built site artifact
      - name: Download built site artifact
        uses: actions/download-artifact@v4
        with:
          name: site-zip
          path: './'  # Path where the artifact will be downloaded

      # Step 2: Unzip the downloaded artifact (site.zip)
      - name: Unzip the built site
        run: unzip site.zip

      # Step 3: Deploy to GitHub Pages
      - name: Deploy to GitHub Pages
        uses: actions/deploy-pages@v1  # Deploy to GitHub Pages

      # Step 4: Create a GitHub issue with deployment status using GitHub CLI
      - name: Create GitHub issue for deployment status
        id: create_issue
        run: |
          # Check if deployment succeeded
          if [ "${{ job.status }}" == "success" ]; then
            STATUS="succeeded"
          else
            STATUS="failed"
          fi

          # Create issue title and body
          TITLE="$(date +%Y-%m-%d) - Deployment: $STATUS"
          BODY="URL: https://<your-username>.github.io/${{ github.repository }}"

          # Authenticate and create the issue using GitHub CLI
          gh auth login --with-token <<< "${{ secrets.GITHUB_TOKEN }}"
          gh issue create --title "$TITLE" --body "$BODY"

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Authenticate using GitHub token
